/*
  Combined bundle generated by ChatGPT
  Order: data/config files first, then renderers
  Include this with: <script src="script.js" defer></script>
*/

/* ===================== activities-data.js ===================== */
// js/activities-data.js
const activitiesConfig = {
  blurbs: [
    'New members welcome all year round.',
    'Monthly check-ins to track our progress.',
    'Workshops, drives, and community events—see what’s next!',
  ]
};

/* =============== end of activities-data.js =============== */


/* ===================== board-data.js ===================== */
// js/board-data.js
const boardConfig = {
  year: '2025–2026',
  members: [
    {
      role: 'President',
      name: 'Brandon Paek',
      img: 'images/brandon-paek.jpg',
      bio: 'Senior at Lawton Chiles; leads club meetings and liaises with the regional Red Cross.'
    },
    {
      role: 'Vice-President',
      name: 'Claire Park',
      img: 'images/claire-park.jpg',
      bio: 'Organizes events and coordinates with faculty advisors.'
    },
    {
      role: 'Secretary',
      name: 'Chi Li',
      img: 'images/Chi-Li.jpg',
      bio: 'Keeps meeting minutes, manages member communications, and updates records.'
    },
    {
      role: 'Treasurer',
      name: 'Karen Qu',
      img: 'images/karen-qu.jpg',
      bio: 'Handles budgeting, fundraising tracking, and financial reporting.'
    }
    // …vice-president, secretary, treasurer…
  ]
};
/* =============== end of board-data.js =============== */


/* ===================== constitution-data.js ===================== */
// Keep ALL editable settings here (one place).
window.ConstitutionConfig = {
  pdfUrl: 'assets/rcc-constitution-public.pdf', // <- keep this filename stable if you can
  viewerOptions: '#toolbar=0&navpanes=0',
  // Set to true to load the PDF only when the section is visible
  lazyLoad: true,
  // Add a version query using ETag/Last-Modified so updates bypass browser cache
  cacheBust: true,
  // Fill the "Last updated" and "size" fields when possible
  updateMeta: true,
};

/* =============== end of constitution-data.js =============== */


/* ===================== gallery-data.js ===================== */
// js/gallery-data.js
// ——————————————————————————
// List your images here. Just add/remove items.
// ——————————————————————————

const galleryImages = [
  { src: 'images/activity1.jpg', alt: 'Blood drive event' },
  { src: 'images/activity2.jpg', alt: 'CPR training session' },
  { src: 'images/activity3.jpg', alt: 'Fundraising bake sale' },
  { src: 'images/activity4.jpg', alt: 'Disaster preparedness workshop' },
  // { src: 'images/activity5.jpg', alt: 'Your new activity here' },
];

/* =============== end of gallery-data.js =============== */


/* ===================== notes-data.js ===================== */
// js/notes-data.js
const notesData = [
  { text: 'Schedule monthly check-in meetings with all officers.' },
  { text: 'Get everyone onboarded by September 1.' },
  { text: 'Secure trainees for IHL campaign.' },
  { text: 'Sign members up for CPR/AED/First aid certification.' }
  // …add, remove or reorder as needed each year…
];

/* =============== end of notes-data.js =============== */


/* ===================== timeline-data.js ===================== */
// js/timeline-data.js
// Human-readable dates; structured times (24h HH:MM) or 'TBD' if unknown.

const timelineData = [
  {
    year: 2025,
    months: [
      {
        month: 'August',
        projects: [
          {
            date: 'Aug 10, 2025',
            title: 'Plan Blood Drives',
            startTime: '10:00',
            endTime: '12:00',
            desc: 'Set dates and recruit 15 new members.'
          },
          {
            date: 'Aug 20, 2025',
            title: 'Design Posters',
            startTime: '15:30',
            endTime: '17:00',
            desc: 'Create and print promotional posters for campus.'
          }
        ]
      },
      {
        month: 'September',
        projects: [
          {
            date: 'TBD',
            title: 'Measles & Rubella Awareness Campaign',
            startTime: 'TBD',
            endTime: 'TBD',
            desc: 'Posters with factoids + a Kahoot quiz with candy prizes.'
          }
        ]
      },
      {
        month: 'October',
        projects: [
          {
            date: 'Oct 15, 2025',
            title: 'Annual Reflection',
            startTime: '14:00',
            endTime: '15:30',
            desc: 'Compile photos, stats, and feedback for yearbook.'
          }
        ]
      },
      {
        month: 'November',
        projects: [
          {
            date: 'TBD',
            title: 'TBD',
            startTime: 'TBD',
            endTime: 'TBD',
            desc: 'TBD'
          }
        ]
      },
      {
        month: 'December',
        projects: [
          {
            date: 'TBD',
            title: 'TBD',
            startTime: 'TBD',
            endTime: 'TBD',
            desc: 'TBD'
          }
        ]
      },
      {
        month: 'January',
        projects: [
          {
            date: 'TBD',
            title: 'TBD',
            startTime: 'TBD',
            endTime: 'TBD',
            desc: 'TBD'
          }
        ]
      },
      {
        month: 'February',
        projects: [
          {
            date: 'TBD',
            title: 'TBD',
            startTime: 'TBD',
            endTime: 'TBD',
            desc: 'TBD'
          }
        ]
      },
      {
        month: 'March',
        projects: [
          {
            date: 'TBD',
            title: 'TBD',
            startTime: 'TBD',
            endTime: 'TBD',
            desc: 'TBD'
          }
        ]
      },
      {
        month: 'April',
        projects: [
          {
            date: 'TBD',
            title: 'TBD',
            startTime: 'TBD',
            endTime: 'TBD',
            desc: 'TBD'
          }
        ]
      }
    ]
  }
];

/* =============== end of timeline-data.js =============== */


/* ===================== activities.js ===================== */
// js/activities.js
document.addEventListener('DOMContentLoaded', () => {
  const listEl = document.getElementById('activities-description');
  if (!listEl || !activitiesConfig || !Array.isArray(activitiesConfig.blurbs)) return;

  // clear any old content
  listEl.innerHTML = '';

  // insert each blurb as a list item
  activitiesConfig.blurbs.forEach(text => {
    const li = document.createElement('li');
    li.textContent = text;
    listEl.appendChild(li);
  });
});

/* =============== end of activities.js =============== */


/* ===================== board.js ===================== */
// js/board.js
document.addEventListener('DOMContentLoaded', () => {
  const yearEl = document.getElementById('board-year');
  const grid   = document.querySelector('#board-members .board-grid');
  if (!yearEl || !grid || !boardConfig) return;

  // Render the year
  yearEl.textContent = `Our ${boardConfig.year} Board`;

  // Render the member cards
  boardConfig.members.forEach(m => {
    const card = document.createElement('div');
    card.className = 'board-card';
    card.innerHTML = `
      <img src="${m.img}" alt="${m.name}" />
      <h3>${m.name}</h3>
      <p class="role">${m.role}</p>
      <p class="bio">${m.bio}</p>
    `;
    grid.appendChild(card);
  });
});

/* =============== end of board.js =============== */


/* ===================== constitution.js ===================== */
(function (cfg) {
  const section = document.getElementById('club-constitution');
  if (!section) return;

  const obj = section.querySelector('object');
  const links = section.querySelectorAll('a[href*=".pdf"]');
  const meta = section.querySelector('#constitution-meta');

  function withV(url, v) {
    if (!v) return url;
    const [base, hash = ''] = url.split('#');
    const sep = base.includes('?') ? '&' : '?';
    return `${base}${sep}v=${encodeURIComponent(v)}${hash ? '#' + hash : ''}`;
  }

  async function headInfo(url) {
    try {
      const res = await fetch(url, { method: 'HEAD', cache: 'no-store' });
      return res;
    } catch (_) {
      return null; // some hosts block HEAD—gracefully skip
    }
  }

  function setObjectAndLinks(version) {
    const viewer = cfg.viewerOptions || '';
    const objSrc = cfg.cacheBust ? withV(cfg.pdfUrl + viewer, version) : (cfg.pdfUrl + viewer);
    const linkHref = cfg.cacheBust ? withV(cfg.pdfUrl, version) : cfg.pdfUrl;

    if (obj) {
      if (cfg.lazyLoad && 'IntersectionObserver' in window) {
        obj.removeAttribute('data'); // pause loading
        const io = new IntersectionObserver((entries) => {
          if (entries.some(e => e.isIntersecting)) {
            obj.setAttribute('data', objSrc);
            io.disconnect();
          }
        });
        io.observe(obj);
      } else {
        obj.setAttribute('data', objSrc);
      }
    }
    links.forEach(a => a.href = linkHref);
  }

  function updateMeta(res) {
    if (!res || !meta || !cfg.updateMeta) return;
    const lastEl = meta.querySelector('[data-lastmod]');
    const sizeEl = meta.querySelector('[data-filesize]');

    const lastMod = res.headers.get('Last-Modified');
    if (lastMod && lastEl) {
      const d = new Date(lastMod);
      lastEl.textContent = new Intl.DateTimeFormat(undefined, {
        year: 'numeric', month: 'long', day: 'numeric'
      }).format(d);
    }

    const len = res.headers.get('Content-Length');
    if (len && sizeEl) {
      const bytes = Number(len), kb = 1024, mb = kb * 1024;
      sizeEl.textContent = bytes >= mb ? (bytes / mb).toFixed(1) + ' MB'
                        : bytes >= kb ? Math.ceil(bytes / kb) + ' KB'
                        : bytes + ' B';
    }
  }

  (async function init() {
    let version = null;
    let res = null;

    if (cfg.cacheBust) {
      res = await headInfo(cfg.pdfUrl);
      if (res) {
        const etag = res.headers.get('ETag');
        const lm = res.headers.get('Last-Modified');
        version = etag ? etag.replace(/"/g, '') : (lm ? new Date(lm).getTime() : null);
      } else {
        // Fallback: force-fresh every load (disable if you prefer caching)
        version = Date.now();
      }
    }

    setObjectAndLinks(version);
    updateMeta(res);
  })();
})(window.ConstitutionConfig || {});

/* =============== end of constitution.js =============== */


/* ===================== gallery.js ===================== */
// js/gallery.js
document.addEventListener('DOMContentLoaded', () => {
  const container = document.querySelector('#collage .collage');
  if (!container) return;

  galleryImages.forEach(({ src, alt }) => {
    const img = document.createElement('img');
    img.src     = src;
    img.alt     = alt;
    img.loading = 'lazy';          // optional: lazy‐load offscreen images
    container.appendChild(img);
  });
});

/* =============== end of gallery.js =============== */


/* ===================== notes.js ===================== */
// js/notes.js
document.addEventListener('DOMContentLoaded', () => {
  const list = document.querySelector('#notes-next-steps .notes-list');
  if (!list || !Array.isArray(notesData)) return;

  // clear any placeholder
  list.innerHTML = '';

  notesData.forEach(item => {
    const li = document.createElement('li');
    li.textContent = item.text;
    list.appendChild(li);
  });
});

/* =============== end of notes.js =============== */


/* ===================== timeline.js ===================== */
// Vertical "month-card" timeline WITHOUT ISO parsing.
// Always shows a .time line: either a formatted range or "TBD".

document.addEventListener('DOMContentLoaded', () => {
  const container = document.querySelector('#activities-timeline .timeline');
  if (!container || !Array.isArray(timelineData)) return;

  // Convert "HH:MM" (24h) -> "H:MM A.M./P.M."
  const fmt12h = (hhmm) => {
    if (!hhmm) return '';
    const [hStr, mStr] = String(hhmm).split(':');
    const h = Number(hStr), m = Number(mStr);
    if (Number.isNaN(h) || Number.isNaN(m)) return '';
    const h12 = ((h + 11) % 12) + 1;
    const ampm = h < 12 ? 'A.M.' : 'P.M.';
    return `${h12}:${String(m).padStart(2, '0')} ${ampm}`;
  };

  const isTBD = v => !v || String(v).trim().toUpperCase() === 'TBD';

  // Build a time string from start/end; return "TBD" if neither is a valid time
  const fmtTimeRange = (p) => {
    const s = p?.startTime, e = p?.endTime;
    const sValid = s && !isTBD(s) && fmt12h(s);
    const eValid = e && !isTBD(e) && fmt12h(e);
    if (sValid && eValid) return `${fmt12h(s)} – ${fmt12h(e)}`;
    if (sValid) return fmt12h(s);
    if (eValid) return fmt12h(e);
    return 'TBD';
  };

  container.innerHTML = '';

  timelineData.forEach(yearBlock => {
    // Year header
    const yearHeader = document.createElement('div');
    yearHeader.className = 'timeline-year';
    yearHeader.textContent = yearBlock.year;
    container.appendChild(yearHeader);

    // Months (keep your original order)
    (yearBlock.months || []).forEach(({ month, projects = [] }) => {
      const card = document.createElement('div');
      card.className = 'month-card';

      // Header (month + count)
      card.innerHTML = `
        <div class="month-header">
          <span class="month-badge">${month}</span>
          <span class="count">${projects.length} ${projects.length === 1 ? 'activity' : 'activities'}</span>
        </div>
      `;

      // Events (always render a .time line)
      const eventsHTML = projects.map(p => {
        const timeStr = fmtTimeRange(p);
        const dateText = p?.date ? String(p.date) : 'TBD';
        return `
          <div class="event${isTBD(p?.date) ? ' tbd' : ''}">
            <span class="date">${dateText}</span>
            <span class="title">${p?.title ?? ''}</span>${p?.desc ? `<span class="desc">: ${p.desc}</span>` : ''}
            <span class="time">${timeStr}</span>
          </div>
        `;
      }).join('');

      card.insertAdjacentHTML('beforeend', eventsHTML);
      container.appendChild(card);
    });
  });
});

/* =============== end of timeline.js =============== */
